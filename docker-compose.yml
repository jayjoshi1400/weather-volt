services:
  postgres:
    image: postgres:13
    container_name: myproject_postgres
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      retries: 5
    networks:
      - data_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.2
    container_name: myproject_zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    ports:
      - "2181:2181"
    networks:
      - data_network

  kafka:
    image: confluentinc/cp-kafka:7.4.2
    container_name: myproject_kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
    depends_on:
      - zookeeper
    networks:
      - data_network

  airflow-init:
    image: apache/airflow:2.7.1
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init &&
        airflow users create \
          --username airflow \
          --password airflow \
          --firstname Anonymous \
          --lastname Admin \
          --role Admin \
          --email admin@example.com
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=${AIRFLOW_SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=false

  airflow-webserver:
    image: apache/airflow:2.7.1
    env_file: .env
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=${AIRFLOW_SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__WEBSERVER__SECRET_KEY}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: webserver
    networks:
      - data_network

  airflow-scheduler:
    image: apache/airflow:2.7.1
    env_file: .env
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=${AIRFLOW_SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    command: scheduler
    networks:
      - data_network

  spark-master:
    image: bitnami/spark:3.5.0
    container_name: myproject_spark_master
    environment:
      - SPARK_MODE=master
      - SPARK_LOCAL_IP=spark-master
    command: 
      - /bin/bash
      - -c
      - "pip install --user requests tenacity && /opt/bitnami/scripts/spark/entrypoint.sh /bin/bash -c 'tail -f /dev/null'"
    ports:
      - "8082:8080"
    volumes:
      - ./data_processing/spark:/app
    networks:
      - data_network

  spark-worker:
    image: bitnami/spark:3.5.0
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    networks:
      - data_network

  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.2  # Updated to valid image tag
    env_file: .env
    volumes:
      - ./dbt:/usr/app/dbt
    command: ["run", "--profiles-dir", "/usr/app/dbt"]
    depends_on:
      - postgres
    networks:
      - data_network

  grafana:
    image: grafana/grafana:10.1.5  # Validated version
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - data_network

volumes:
  postgres_data:
  grafana_data:

networks:
  data_network:
    driver: bridge
